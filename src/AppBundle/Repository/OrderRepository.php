<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Order;
use AppBundle\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Order::class);
    }

    /**
     * @param string $sessionId
     * @return Order|null
     */
    public function getSessionCart(string $sessionId){

        $now = new \DateTime();

        $qb = $this->createQueryBuilder('o')
            ->join('o.items', 'items')
            ->where('o.sessionId = :sessionId')
            ->andWhere('o.expireAt > :now')
            ->andWhere('o.status = :status_open')
            ->andWhere('o.owner is null')
            ->setParameter('sessionId', $sessionId)
            ->setParameter('now', $now)
            ->setParameter('status_open', Order::STATUS['open'])
            ;

        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    /**
     * @param User $user
     * @return Order|null
     */
    public function getUserCart(User $user){

        $now = new \DateTime();

        $qb = $this->createQueryBuilder('o')
            ->join('o.items', 'items')
            ->where('o.owner = :owner')
            ->andWhere('o.expireAt > :now')
            ->andWhere('o.status = :status_open')
            ->setParameter('owner', $user)
            ->setParameter('now', $now)
            ->setParameter('status_open', Order::STATUS['open'])
        ;

        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function getUserSuccessfulOrders(User $user){

        $qb = $this->createQueryBuilder('o')
            ->join('o.items', 'items')
            ->where('o.owner = :owner')
            ->andWhere('o.status = :status_paid')
            ->orderBy('o.id', 'DESC')
            ->setParameter('owner', $user)
            ->setParameter('status_paid', Order::STATUS['paid'])
        ;

        $result = $qb->getQuery()->getResult();
        return $result;
    }

    public function getOrdersByStatus($status){

        $qb = $this->createQueryBuilder('o')
            ->join('o.items', 'items')
            ->where('o.status = :status')
            ->setParameter('status', $status)
        ;

        $result = $qb->getQuery()->getResult();
        return $result;
    }

    public function getExpiredOrdersByStatus(\DateTime $now, $status){

        $qb = $this->createQueryBuilder('o')
            ->join('o.items', 'items')
            ->where('o.status = :status')
            ->andWhere('o.expireAt <= :now')
            ->setParameter('status', $status)
            ->setParameter('now', $now)
        ;

        $result = $qb->getQuery()->getResult();
        return $result;
    }

}
